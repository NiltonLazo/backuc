// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Generator
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DOCKER")
}

// Models
model Usuario {
  id              Int               @id @default(autoincrement())
  nombre          String
  correo          String            @unique
  rol             Rol
  sede            String?
  telefono        String?
  foto            String? 
  codigo          String?           @unique // Solo para estudiantes
  ciclo           Int?              // Solo para estudiantes
  carrera         String?           // Solo para estudiantes
  modalidad       Modalidad?
  creadoEn        DateTime          @default(now())

  // ðŸ”¹ Campos especÃ­ficos para los mÃ©dicos
  horarios        HorarioMedico[]
  bloqueos        BloqueoHorario[]

  // RelaciÃ³n con Citas (tanto como estudiante o como mÃ©dico)
  citasEstudiante Cita[]            @relation("UsuarioCitas")
  citasMedico     Cita[]            @relation("MedicoCitas")

  // ðŸ”¹ RelaciÃ³n con Recomendaciones (para los mÃ©dicos)
  recomendaciones Recomendacion[]

  // RelaciÃ³n con Notificaciones
  notificaciones  Notificacion[]
}

model HorarioMedico {
  id         Int      @id @default(autoincrement())
  medico     Usuario  @relation(fields: [medicoId], references: [id])
  medicoId   Int
  dia        DiaSemana
  horaInicio String
  horaFin    String
  creadoEn   DateTime @default(now())
}

model BloqueoHorario {
  id       Int      @id @default(autoincrement())
  medico   Usuario  @relation(fields: [medicoId], references: [id])
  medicoId Int
  fecha    DateTime // ðŸ”¹ DÃ­a especÃ­fico en el que no trabajarÃ¡
  motivo   String?  // ðŸ”¹ Opcional: Motivo del bloqueo
  creadoEn DateTime @default(now())
}

model Cita {
  id            Int       @id @default(autoincrement())
  estudianteId  Int       @map("estudiante_id")
  estudiante    Usuario   @relation("UsuarioCitas", fields: [estudianteId], references: [id], map: "fk_cita_estudiante")
  medicoId      Int       @map("medico_id")
  medico        Usuario   @relation("MedicoCitas", fields: [medicoId], references: [id], map: "fk_cita_medico")
  motivo        String
  fecha         DateTime  @db.Date  
  hora          String    @db.VarChar(5)
  tipo          TipoCita
  estado        Estado
  meetLink      String?   // NUEVO: Enlace de Google Meet
  creadoEn      DateTime  @default(now())

  @@unique([medicoId, fecha, hora])

  recomendaciones   Recomendacion[]
  reprogramaciones  Reprogramacion[]
  notificaciones    Notificacion[]
}

model Recomendacion {
  id       Int     @id @default(autoincrement())
  cita     Cita    @relation(fields: [citaId], references: [id])
  citaId   Int
  medico   Usuario @relation(fields: [medicoId], references: [id])
  medicoId Int
  contenido String
  creadaEn DateTime @default(now())
}

model Reprogramacion {
  id        Int     @id @default(autoincrement())
  cita      Cita    @relation(fields: [citaId], references: [id])
  citaId    Int
  nuevaFecha DateTime
  nuevaHora String
  motivo    String
  creadoEn  DateTime @default(now())
}

model Notificacion {
  id        Int     @id @default(autoincrement())
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  cita      Cita?   @relation(fields: [citaId], references: [id])
  citaId    Int?
  mensaje   String
  tipo      TipoNotificacion
  estado    EstadoNotificacion
  enviadoEn DateTime?
}

model Reporte {
  id                 Int     @id @default(autoincrement())
  periodo            String   
  totalCitas         Int
  citasAtendidas     Int      // ðŸ”¹ Cantidad de citas confirmadas
  citasCanceladas    Int
  citasReprogramadas Int
  citasVirtuales     Int      // ðŸ”¹ NÃºmero de citas en modalidad virtual
  citasPresenciales  Int      // ðŸ”¹ NÃºmero de citas en modalidad presencial
  creadoEn           DateTime @default(now())
}

// Enums
enum Rol {
  estudiante
  usuario
  administrador
  medico
}

enum DiaSemana {
  lunes
  martes
  miercoles
  jueves
  viernes
  sabado
  domingo
}

enum Modalidad {
  presencial
  semipresencial
  a_distancia
}

enum Estado {
  pendiente
  confirmada
  cancelada
  reprogramada
}

enum TipoNotificacion {
  recordatorio
  confirmacion
  cancelacion
  otro
}

enum EstadoNotificacion {
  pendiente
  enviado
  leido
}

enum TipoCita {
  virtual
  presencial
}