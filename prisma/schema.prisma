// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Generator
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DOCKER")
}

// MODELO PARA GESTIONAR CORREOS AUTORIZADOS PARA ADMINISTRADORES Y PSICÃ“LOGOS
model AllowedEmail {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  role      RoleAllowed
  active    Boolean     @default(true)
  creadoEn  DateTime    @default(now())
}

enum RoleAllowed {
  psicologo
  administrador
}

// MODELOS DE USUARIOS

model Estudiante {
  id                   Int       @id @default(autoincrement())
  nombre               String
  correo               String    @unique
  telefono             String?
  foto                 String?
  codigo               String?   @unique
  sede                 String?
  ciclo                Int?
  carrera              String?
  modalidad            Modalidad?
  calendarAccessToken  String?   @db.Text
  calendarRefreshToken String?
  calendarTokenExpiry  DateTime?
  creadoEn             DateTime  @default(now())

  // Relaciones
  citas                Cita[]    @relation("CitasEstudiante")
  notificaciones       Notificacion[]
}

model Psicologo {
  id                   Int       @id @default(autoincrement())
  nombre               String
  correo               String    @unique
  telefono             String?
  foto                 String?
  sede                 String?
  calendarAccessToken  String?   @db.Text
  calendarRefreshToken String?
  calendarTokenExpiry  DateTime?
  creadoEn             DateTime  @default(now())

  // Relaciones
  horarios             Horario[]
  bloqueos             BloqueoHorario[]
  citas                Cita[]    @relation("CitasPsicologo")
  recomendaciones      Recomendacion[]
  notificaciones       Notificacion[]
}

model Administrador {
  id                   Int       @id @default(autoincrement())
  nombre               String
  correo               String    @unique
  telefono             String?
  foto                 String?
  calendarAccessToken  String?   @db.Text   // Agregado para guardar el token
  creadoEn             DateTime  @default(now())

  // Relaciones (puedes agregar las que necesites)
  notificaciones       Notificacion[]
}

// OTROS MODELOS

model Horario {
  id          Int       @id @default(autoincrement())
  psicologo   Psicologo @relation(fields: [psicologoId], references: [id])
  psicologoId Int
  dia         DiaSemana
  horaInicio  String
  horaFin     String
  creadoEn    DateTime  @default(now())
}

model BloqueoHorario {
  id          Int       @id @default(autoincrement())
  psicologo   Psicologo @relation(fields: [psicologoId], references: [id])
  psicologoId Int
  fecha       DateTime
  motivo      String?
  creadoEn    DateTime  @default(now())
}

model Cita {
  id            Int         @id @default(autoincrement())
  estudianteId  Int         @map("estudiante_id")
  estudiante    Estudiante  @relation("CitasEstudiante", fields: [estudianteId], references: [id])
  psicologoId   Int         @map("psicologo_id")
  psicologo     Psicologo   @relation("CitasPsicologo", fields: [psicologoId], references: [id])
  motivo        String
  fecha         DateTime    @db.Date  
  hora          String      @db.VarChar(5)
  tipo          TipoCita
  estado        Estado
  meetLink      String?     // Enlace de Google Meet (o null para citas presenciales)
  creadoEn      DateTime    @default(now())

  @@unique([psicologoId, fecha, hora])

  recomendaciones   Recomendacion[]
  reprogramaciones  Reprogramacion[]
  notificaciones    Notificacion[]
}

model Recomendacion {
  id          Int        @id @default(autoincrement())
  cita        Cita       @relation(fields: [citaId], references: [id])
  citaId      Int
  psicologo   Psicologo  @relation(fields: [psicologoId], references: [id])
  psicologoId Int
  contenido   String
  creadaEn    DateTime   @default(now())
}

model Reprogramacion {
  id         Int      @id @default(autoincrement())
  cita       Cita     @relation(fields: [citaId], references: [id])
  citaId     Int
  nuevaFecha DateTime
  nuevaHora  String
  motivo     String
  creadoEn   DateTime @default(now())
}

model Notificacion {
  id               Int      @id @default(autoincrement())

  estudiante       Estudiante?    @relation(fields: [estudianteId], references: [id])
  estudianteId     Int?

  psicologo        Psicologo?     @relation(fields: [psicologoId], references: [id])
  psicologoId      Int?

  administrador    Administrador? @relation(fields: [administradorId], references: [id])
  administradorId  Int?

  cita             Cita?          @relation(fields: [citaId], references: [id])
  citaId           Int?

  mensaje          String
  tipo             TipoNotificacion
  estado           EstadoNotificacion
  enviadoEn        DateTime?
}

model Reporte {
  id                 Int      @id @default(autoincrement())
  periodo            String   
  totalCitas         Int
  citasAtendidas     Int
  citasCanceladas    Int
  citasReprogramadas Int
  citasVirtuales     Int
  citasPresenciales  Int
  creadoEn           DateTime @default(now())
}

enum DiaSemana {
  lunes
  martes
  miercoles
  jueves
  viernes
  sabado
  domingo
}

enum Modalidad {
  presencial
  semipresencial
  a_distancia
}

enum Estado {
  pendiente
  confirmada
  cancelada
  reprogramada
}

enum TipoNotificacion {
  recordatorio
  confirmacion
  cancelacion
  otro
}

enum EstadoNotificacion {
  pendiente
  enviado
  leido
}

enum TipoCita {
  virtual
  presencial
}